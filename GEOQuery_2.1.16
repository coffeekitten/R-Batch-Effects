---
title: "GEOQuery Data Collection"
author: "Jessica Phung"
date: "February 1, 2016"
output: html_document
---
##Bioconductor is a company that is an open source for bioinformatics. The code below allows for access to the packages off biocoductor. 


source("https://bioconductor.org/biocLite.R")
biocLite()

##GEOquery is a package for collecting data off of the NCBI GEO website into R. Each user uploaded dataset has its own GEO accession idenifier which is inputed in the function getGEO function.

biocLite("GEOquery")

##The dataset below downloading expressionset data on lung tissue samples from Texas. The data will down load as a list. But it is important to format it into an expression set which will allow for easier data manipulation.This data has 40 normal samples.   

gse1 <- getGEO("GSE1643",GSEMatrix=FALSE)

##To start converting a gse to an expression set use the code below. 

gsmplatforms1 <-lapply(GSMList(gse1),function(x){Meta(x)$platform})
head(gsmplatforms1) 

##This should show you the platforms the data was collected on. A platform is the method they used to collect their data. 

##If your data has more than one platform you can filter out columns of data you don't want. In this case we want the GPL570 platform.

gsmlist1 = Filter(function(gsm){Meta(gsm)$platform=='GPL570'},GSMList(gse1))
length(gsmlist1)

##All the samples should be one platform so the step above was to double check all the data was that same.
##To check the column desciptions do this below. 

Columns(gsmlist1[[1]])[1:5,]

## Check rows
Table(gsmlist1[[1]])[1:5,]

##This is how to get the probe ordering.

probesets1 <- Table(GPLList(gse1)[[1]])$ID

## Make a data matrix and log the data.

data.matrix1 <- do.call('cbind',lapply(gsmlist1,function(x) 
                                      {tab <- Table(x)
                                       mymatch <- match(probesets1,tab$ID_REF)
                                       return(tab$VALUE[mymatch])
                                     }))
data.matrix1 <- apply(data.matrix1,2,function(x) {as.numeric(as.character(x))})
data.matrix1 <- log2(data.matrix1)
data.matrix1[1:5,]

##Now to put it all together into an expression set, use the code below. 

require(Biobase)
rownames(data.matrix1) <- probesets1
colnames(data.matrix1) <- names(gsmlist1)
pdata1 <- data.frame(samples=names(gsmlist1))
rownames(pdata1) <- names(gsmlist1)
pheno1 <- as(pdata1,"AnnotatedDataFrame")
eset1 <- new('ExpressionSet',exprs=data.matrix1,phenoData=pheno1)
eset1

##And the output should be the data formated. For the second data set from NCBI GEO I put the code below without the explainations. Using the same process the second data set is reformated into an expression set. This set has 96 samples with 46 normal samples. 

gse2 <- getGEO("GSE51024",GSEMatrix=FALSE)

gsmplatforms2 <-lapply(GSMList(gse2),function(x){Meta(x)$platform})

head(gsmplatforms2) 

gsmlist2 = Filter(function(gsm){Meta(gsm)$platform=='GPL570'},GSMList(gse2))
length(gsmlist2)

Columns(gsmlist2[[1]])[1:5,]

Table(gsmlist2[[1]])[1:5,]

probesets2 <- Table(GPLList(gse2)[[1]])$ID

data.matrix2 <- do.call('cbind',lapply(gsmlist2,function(x) 
                                      {tab <- Table(x)
                                       mymatch <- match(probesets2,tab$ID_REF)
                                       return(tab$VALUE[mymatch])
                                     }))
data.matrix2 <- apply(data.matrix2,2,function(x) {as.numeric(as.character(x))})
data.matrix2 <- log2(data.matrix2)
data.matrix2[1:5,]

require(Biobase)

rownames(data.matrix2) <- probesets2

colnames(data.matrix2) <- names(gsmlist2)

pdata2 <- data.frame(samples=names(gsmlist2))

rownames(pdata2) <- names(gsmlist2)

pheno2 <- as(pdata2,"AnnotatedDataFrame")

eset2 <- new('ExpressionSet',exprs=data.matrix2,phenoData=pheno2)

eset2

## This is the code to access the third dataset with 50 samples and 25 normal samples.

gse3 <- getGEO("GSE27262",GSEMatrix=FALSE)

gsmplatforms3 <-lapply(GSMList(gse3),function(x){Meta(x)$platform})

head(gsmplatforms3) 

gsmlist3 = Filter(function(gsm){Meta(gsm)$platform=='GPL570'},GSMList(gse3))
length(gsmlist3)

Columns(gsmlist3[[1]])[1:5,]

Table(gsmlist3[[1]])[1:5,]

probesets3 <- Table(GPLList(gse3)[[1]])$ID

data.matrix3 <- do.call('cbind',lapply(gsmlist3,function(x) 
                                      {tab <- Table(x)
                                       mymatch <- match(probesets3,tab$ID_REF)
                                       return(tab$VALUE[mymatch])
                                     }))
data.matrix3 <- apply(data.matrix3,2,function(x) {as.numeric(as.character(x))})
data.matrix3 <- log2(data.matrix3)
data.matrix3[1:5,]

require(Biobase)

rownames(data.matrix3) <- probesets3

colnames(data.matrix3) <- names(gsmlist3)

pdata3 <- data.frame(samples=names(gsmlist3))

rownames(pdata3) <- names(gsmlist3)

pheno3 <- as(pdata3,"AnnotatedDataFrame")

eset3 <- new('ExpressionSet',exprs=data.matrix3,phenoData=pheno3)

eset3


